
BeginPackage["Error`", {"Stack`"}];

(* UserError::usage = "UserError[message, arg1, arg2, ...] reports an error which is expected to be generated by a correctly-functioning system." *)
(* InternalError::usage = "InternalError[message, arg1, arg2, ...] reports an error which is caused by a bug in NRMMA." *)
Error::usage = "Error[message, arg1, arg2, ...] reports an error to the user.";
CatchError::usage = "CatchError[expr] evaluates expr, and returns its result unless an error was generated, in which case the error message is displayed.";

Begin["`Private`"];

Error[message_String, args___] :=
  Throw[{message,{args}, CurrentStack[]}, Error];

SetAttributes[CatchError, HoldAll];
CatchError[expr_] :=
  Catch[expr, Error, Function[{value,tag}, Print[StringForm[value[[1]], Sequence@@value[[2]]]]; ShowStack[]; ClearStack[]; Null]];

End[];

EndPackage[];
