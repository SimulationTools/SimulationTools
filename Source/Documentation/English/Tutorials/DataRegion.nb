Notebook[{

Cell[CellGroupData[{
Cell["DataRegion", "Title"],

Cell[TextData[{
 "A ",
 ButtonBox["DataRegion",
  BaseStyle->"Link",
  ButtonData->"paclet:SimulationTools/ref/DataRegion"],
 " is an n-dimensional block of numbers on a uniform regular Cartesian \
coordinate grid. A DataRegion object contains the block of numbers, as well \
as the specification of the coordinate grid.\nA ",
 ButtonBox["DataRegion",
  BaseStyle->"Link",
  ButtonData->"paclet:SimulationTools/ref/DataRegion"],
 " object is printed in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " as DataRegion[name, dims, range] to avoid printing large quantities of \
data.  To see the full structure, including all the data, use ",
 ButtonBox["FullForm",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/FullForm"],
 ".  Mathematical, plotting and interpolation functions are defined for \
DataRegions."
}], "Text"],

Cell[CellGroupData[{

Cell["Working with DataRegions", "Section"],

Cell[CellGroupData[{

Cell["Creating DataRegions", "Subsection"],

Cell[BoxData[GridBox[{
   {"ToDataRegion", Cell["ReadGridFunction", "TableText"]}
  }]], "DefinitionBox"],

Cell["Functions for creating DataRegions.", "Caption"],

Cell[TextData[{
 "Using ",
 ButtonBox["ToDataRegion",
  BaseStyle->"Link",
  ButtonData->"paclet:SimulationTools/ref/ToDataRegion"],
 "[",
 StyleBox["data",
  FontSlant->"Italic"],
 ", ",
 StyleBox["origin",
  FontSlant->"Italic"],
 ", ",
 StyleBox["spacing",
  FontSlant->"Italic"],
 "] we can create a ",
 ButtonBox["DataRegion",
  BaseStyle->"Link",
  ButtonData->"paclet:SimulationTools/ref/DataRegion"],
 " object from the (multidimensional) list ",
 StyleBox["data.",
  FontSlant->"Italic"],
 " This data is assumed to be in row-major order, eg. ",
 StyleBox["data",
  FontSlant->"Italic"],
 "[[",
 StyleBox["ix",
  FontSlant->"Italic"],
 ",",
 StyleBox["iy",
  FontSlant->"Italic"],
 ",",
 StyleBox["iz",
  FontSlant->"Italic"],
 "]] for the case of 3D data. The DataRegion will have an origin and spacing \
given by the lists ",
 StyleBox["origin",
  FontSlant->"Italic"],
 " = {ox, oy, ...} and ",
 StyleBox["spacing ",
  FontSlant->"Italic"],
 "= {dx, dy, ...}.  ",
 "SimulationTools",
 " uses row-major order because that is the convention adopted by ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ".  Note that this corresponds to \[OpenCurlyDoubleQuote]C\
\[CloseCurlyDoubleQuote] order, not \[OpenCurlyDoubleQuote]Fortran\
\[CloseCurlyDoubleQuote] order, as used by the Cactus framework."
}], "Text"],

Cell[BoxData[
 RowBox[{"data", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"x", "^", "2"}], "+", "y"}], ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", "0", ",", "1", ",", "0.2"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"y", ",", "0", ",", "6", ",", "0.6"}], "}"}]}], 
   "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"d", "=", 
  RowBox[{"ToDataRegion", "[", 
   RowBox[{"data", ",", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0.2", ",", "0.6"}], "}"}], ",", 
    RowBox[{"VariableName", "\[Rule]", "\"\<MyData\>\""}]}], 
   "]"}]}]], "Input"],

Cell[TextData[{
 "Multiple ",
 ButtonBox["DataRegions",
  BaseStyle->"Link",
  ButtonData->"paclet:SimulationTools/ref/DataRegions"],
 " d1, d2, ... can be merged into a single enclosing one using \
ToDataRegion[{d1, d2, ...}];"
}], "Text"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Getting Information about a DataRegion", "Subsection"],

Cell[BoxData[GridBox[{
   {"ToListOfData", "MinCoordinates", "CoordinateRanges"},
   {"ToListOfCoordinates", "MaxCoordinates", "CoordinateSpacings"},
   {"ToList", "VariableName", "ArrayDepth"},
   {"Dimensions", "\[Placeholder]", "\[Placeholder]"}
  }]], "DefinitionBox3Col"],

Cell["Functions for working with DataRegions.", "Caption"],

Cell[TextData[{
 "A 1D DataRegion can be converted to a DataTable object using ",
 ButtonBox["ToDataTable",
  BaseStyle->"Link",
  ButtonData->"paclet:SimulationTools/ref/ToDataTable"],
 "."
}], "Text"],

Cell[TextData[{
 ButtonBox["ToListOfData r",
  BaseStyle->"Link",
  ButtonData->"paclet:SimulationTools/ref/GetData"],
 "eturns the data in the DataRegion as a nested list."
}], "Text"],

Cell[BoxData[
 RowBox[{"ToListOfData", "[", "d", "]"}]], "Input"],

Cell[TextData[{
 ButtonBox["ToListOfCoordinates r",
  BaseStyle->"Link",
  ButtonData->"paclet:SimulationTools/ref/GetData"],
 "eturns the coordinates of all the points in the DataRegion"
}], "Text"],

Cell[BoxData[
 RowBox[{"ToListOfCoordinates", "[", "d", "]"}]], "Input"],

Cell[TextData[{
 ButtonBox["ToList r",
  BaseStyle->"Link",
  ButtonData->"paclet:SimulationTools/ref/GetData"],
 "eturns a list containing all the data and all the coordinates from the \
DataRegion."
}], "Text"],

Cell[BoxData[
 RowBox[{"ToList", "[", "d", "]"}]], "Input"],

Cell[TextData[{
 ButtonBox["Dimensions",
  BaseStyle->"Link",
  ButtonData->"paclet:SimulationTools/ref/GetDimensions"],
 " returns a list {",
 StyleBox["nx",
  FontSlant->"Italic"],
 ", ",
 StyleBox["ny",
  FontSlant->"Italic"],
 ", ",
 StyleBox["nz, ...",
  FontSlant->"Italic"],
 "} containing the number of points in each direction."
}], "Text"],

Cell[BoxData[
 RowBox[{"Dimensions", "[", "d", "]"}]], "Input"],

Cell[TextData[{
 ButtonBox["MinCoordinates ",
  BaseStyle->"Link",
  ButtonData->"paclet:SimulationTools/ref/GetOrigin"],
 "returns the minimum coordinates of the DataRegion."
}], "Text"],

Cell[BoxData[
 RowBox[{"MinCoordinates", "[", "d", "]"}]], "Input"],

Cell[TextData[{
 ButtonBox["MaxCoordinates ",
  BaseStyle->"Link",
  ButtonData->"paclet:SimulationTools/ref/GetOrigin"],
 "returns the maximum coordinates of the DataRegion"
}], "Text"],

Cell[BoxData[
 RowBox[{"MaxCoordinates", "[", "d", "]"}]], "Input"],

Cell[TextData[{
 ButtonBox["VariableName",
  BaseStyle->"Link",
  ButtonData->"paclet:SimulationTools/ref/GetVariableName"],
 " returns a string containing the name of the DataRegion.  This name can be \
set using the Variable option of ToDataRegion."
}], "Text"],

Cell[BoxData[
 RowBox[{"VariableName", "[", "d", "]"}]], "Input"],

Cell[TextData[{
 ButtonBox["CoordinateRanges",
  BaseStyle->"Link",
  ButtonData->"paclet:SimulationTools/ref/GetDataRange"],
 " returns a list of the form {{",
 StyleBox["xmin",
  FontSlant->"Italic"],
 ", ",
 StyleBox["xmax",
  FontSlant->"Italic"],
 "}, {y",
 StyleBox["min",
  FontSlant->"Italic"],
 ", y",
 StyleBox["max",
  FontSlant->"Italic"],
 "}, {z",
 StyleBox["min",
  FontSlant->"Italic"],
 ", z",
 StyleBox["max",
  FontSlant->"Italic"],
 "}, ...} describing the minimum and maximum coordinates of the DataRegion."
}], "Text"],

Cell[BoxData[
 RowBox[{"CoordinateRanges", "[", "d", "]"}]], "Input"],

Cell[TextData[{
 ButtonBox["CoordinateSpacings",
  BaseStyle->"Link",
  ButtonData->"paclet:SimulationTools/ref/GetSpacing"],
 " returns the spacing between points in the DataRegion in each direction."
}], "Text"],

Cell[BoxData[
 RowBox[{"CoordinateSpacings", "[", "d", "]"}]], "Input"],

Cell[TextData[{
 ButtonBox["ArrayDepth ",
  BaseStyle->"Link",
  ButtonData->"paclet:SimulationTools/ref/GetNumDimensions"],
 "returns an integer corresponding to the dimensionality of the data."
}], "Text"],

Cell[BoxData[
 RowBox[{"ArrayDepth", "[", "d", "]"}]], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Manipulating DataRegions", "Subsection"],

Cell[TextData[{
 "The ",
 ButtonBox["Interpolation",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Interpolation"],
 " function has been overloaded to work on ",
 ButtonBox["DataRegion",
  BaseStyle->"Link",
  ButtonData->"paclet:SimulationTools/ref/DataRegion"],
 " objects. The resulting function will generically be a function of ",
 StyleBox["n",
  FontSlant->"Italic"],
 " variables, where ",
 StyleBox["n",
  FontSlant->"Italic"],
 " is the dimensionality of the data."
}], "Text"],

Cell[BoxData[
 RowBox[{"f", "=", 
  RowBox[{"Interpolation", "[", "d", "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"f", "[", 
  RowBox[{"0.12222", ",", "5.78"}], "]"}]], "Input"],

Cell["Perform a line integral using the interpolating function:", "Text"],

Cell[BoxData[
 RowBox[{"NIntegrate", "[", 
  RowBox[{
   RowBox[{"f", "[", 
    RowBox[{"t", ",", 
     RowBox[{"t", "^", "2"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", "0", ",", "1"}], "}"}]}], "]"}]], "Input"],

Cell[TextData[{
 "The ",
 ButtonBox["Part",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Interpolation"],
 " function, i.e. d[[2]] etc, has been overloaded to work on ",
 ButtonBox["DataRegion",
  BaseStyle->"Link",
  ButtonData->"paclet:SimulationTools/ref/DataRegion"],
 " objects. You can extract a single value, for example d[[3,8,1]], or a \
lower-dimensional DataRegion, d[[All,All,12]].  You can also specify ranges \
of indices: d[[All,3;;8,12]].  Unless the result is a single point, the \
returned value is always a DataRegion."
}], "Text"],

Cell[TextData[{
 "The ",
 ButtonBox["Slab",
  BaseStyle->"Link",
  ButtonData->"paclet:SimulationTools/ref/Slab"],
 " function allows you to extract part of a DataRegion by coordinate rather \
than by index, as in Part above.  For example, if you have a 3D DataRegion \
and you want to obtain a slice in the xy plane at z = 3.5,  you can use \
d[[All,All,3.5]].  You can also specify coordinate ranges:  d[[-2.0;;+2.0, \
-2.0;;+2.0, 3.5]]."
}], "Text"],

Cell[BoxData["d"], "Input"],

Cell[BoxData[
 RowBox[{"d2", "=", 
  RowBox[{"Slab", "[", 
   RowBox[{"d", ",", "All", ",", "3.0"}], "]"}]}]], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Plotting functions", "Subsection"],

Cell[BoxData[GridBox[{
   {"ListPlot", Cell["ArrayPlot", "TableText"]},
   {"ListLinePlot", Cell["ListPlot3D", "TableText"]},
   {"ListDensityPlot", Cell["ListContourPlot", "TableText"]}
  }]], "DefinitionBox"],

Cell["Plotting functions.", "Caption"],

Cell[TextData[{
 "Several standard ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " plotting functions have been modified to work also with DataRegions."
}], "Text"],

Cell["\<\
ListPlot and ListLinePlot can be used with 1-dimensional DataRegions.\
\>", "Text"],

Cell[BoxData[
 RowBox[{"ListLinePlot", "[", "d2", "]"}]], "Input"],

Cell["\<\
ListDensityPlot, ArrayPlot, ListPlot3D and ListContourPlot can be used with \
2-dimensional DataRegions.  The DataRange option is computed automatically \
from the coordinate information in the DataRegion.\
\>", "Text"],

Cell[BoxData[
 RowBox[{"ArrayPlot", "[", 
  RowBox[{"d", ",", 
   RowBox[{"FrameTicks", "\[Rule]", "True"}]}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"ListPlot3D", "[", "d", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"ListDensityPlot", "[", 
  RowBox[{"d", ",", 
   RowBox[{"AspectRatio", "\[Rule]", "Automatic"}]}], "]"}]], "Input"],

Cell[TextData[{
 ButtonBox["Outline",
  BaseStyle->"Link",
  ButtonData->"paclet:SimulationTools/ref/Outline"],
 " produces a ",
 ButtonBox["Graphics",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Graphics"],
 " object (",
 ButtonBox["Line",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Line"],
 ", ",
 ButtonBox["Rectangle",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Rectangle"],
 " or ",
 ButtonBox["Cuboid",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Cuboid"],
 ") with a shape corresponding to that of the ",
 ButtonBox["DataRegion",
  BaseStyle->"Link",
  ButtonData->"paclet:SimulationTools/ref/DataRegion"],
 "."
}], "Text"],

Cell[BoxData[
 RowBox[{"Graphics", "[", 
  RowBox[{"Outline", "[", "d", "]"}], "]"}]], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Mathematical functions", "Subsection"],

Cell[BoxData[
 RowBox[{"d3", "=", 
  RowBox[{"ToDataRegion", "[", 
   RowBox[{
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"x", "^", "3"}], "-", "y"}], ",", 
      RowBox[{"{", 
       RowBox[{"x", ",", "0", ",", "1", ",", "0.2"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"y", ",", "0", ",", "6", ",", "0.6"}], "}"}]}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0.2", ",", "0.6"}], "}"}]}], "]"}]}]], "Input"],

Cell["\<\
You can perform many mathematical operations directly on DataRegions:\
\>", "Text"],

Cell[BoxData[
 RowBox[{"d", "+", "d3"}]], "Input"],

Cell[BoxData[
 RowBox[{"d", "-", "d3"}]], "Input"],

Cell[BoxData[
 RowBox[{"3.0", "*", "d"}]], "Input"],

Cell[BoxData[
 RowBox[{"Sin", "[", "d", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"Log10", "[", "d", "]"}]], "Input"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
Saveable->True,
WindowSize->{629, 756},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
PrivateNotebookOptions->{"FileOutlineCache"->False},
ShowSelection->True,
TrackCellChangeTimes->False,
FrontEndVersion->"8.0 for Mac OS X x86 (32-bit, 64-bit Kernel) (October 5, \
2011)",
StyleDefinitions->"Default.nb"
]

